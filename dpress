#!/usr/bin/env bash
# This script was generated by bashly 1.0.1 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
dpress_usage() {
  if [[ -n $long_usage ]]; then
    printf "dpress - Application to joint extracting and compressing tools for zip, rar and tar.gz extensions\n"
    echo

  else
    printf "dpress - Application to joint extracting and compressing tools for zip, rar and tar.gz extensions\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  dpress COMMAND\n"
  printf "  dpress [COMMAND] --help | -h\n"
  printf "  dpress --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   extract a file\n" "extract "
  printf "  %s   compress a file\n" "compress"
  printf "  %s   list files in a compressed file\n" "list    "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "RARFILES"
    printf "\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "ZIPFILES"
    printf "\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "TARFILES"
    printf "\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "XZFILES"
    printf "\n"
    echo

  fi
}

# :command.usage
dpress_extract_usage() {
  if [[ -n $long_usage ]]; then
    printf "dpress extract - extract a file\n"
    echo

  else
    printf "dpress extract - extract a file\n"
    echo

  fi

  printf "Alias: e\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dpress extract SOURCE [TARGET] [OPTIONS]\n"
  printf "  dpress extract --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--del, -d"
    printf "    delete source file\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "SOURCE"
    printf "    file toward which apply the command\n"
    echo

    # :argument.usage
    printf "  %s\n" "TARGET"
    printf "    extract in another directory\n"
    echo

  fi
}

# :command.usage
dpress_compress_usage() {
  if [[ -n $long_usage ]]; then
    printf "dpress compress - compress a file\n"
    echo

  else
    printf "dpress compress - compress a file\n"
    echo

  fi

  printf "Alias: c\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dpress compress SOURCE [TARGET] [OPTIONS]\n"
  printf "  dpress compress --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--del, -d"
    printf "    delete source file\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "SOURCE"
    printf "    file toward which apply the command\n"
    echo

    # :argument.usage
    printf "  %s\n" "TARGET"
    printf "    target filename (default: same as source)\n"
    echo

  fi
}

# :command.usage
dpress_list_usage() {
  if [[ -n $long_usage ]]; then
    printf "dpress list - list files in a compressed file\n"
    echo

  else
    printf "dpress list - list files in a compressed file\n"
    echo

  fi

  printf "Alias: l\n"
  echo

  printf "%s\n" "Usage:"
  printf "  dpress list SOURCE\n"
  printf "  dpress list --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "SOURCE"
    printf "    file toward which apply the command\n"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  dpress extract file.zip\n"
    printf "  dpress list file.rar\n"
    printf "  dpress compress file.tar.gz file\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}
# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do echo "- \${deps[$k]} = ${deps[$k]}"; done
  fi

}

# :command.command_functions
# :command.function
dpress_extract_command() {
  # src/extract_command.sh
  echo "# this file is located in 'src/extract_command.sh'"
  echo "# code for 'dpress extract' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

# :command.function
dpress_compress_command() {
  # src/compress_command.sh
  inspect_args
  source_file="${args[source]}"
  target_file="${args[target]}"
  # Compress file in current directory
  # Globals:
  #   RARFILES
  #   ZIPFILES
  #   TARFILES
  # Arguments:
  #   Name of new compressed file
  #   Name of file to compress
  # Outputs:
  #   None
  compressFile () {
      if [[ $source_file =~ $RARFILES ]]; then

          rar a -r "$source_file" "$target_file"

          elif [[ $source_file =~ $ZIPFILES ]]; then

          zip -r "$source_file" "$target_file"

          elif [[ $source_file =~ $TARFILES ]]; then

          tar -zcvf "$source_file" "$target_file"

          elif [[ $source_file =~ $XZFILES ]]; then

          tar cJvf "$source_file" "$target_file"

      fi
  }

  compressFile "$source_file" "$target_file"
}

# :command.function
dpress_list_command() {
  # src/list_command.sh
  # inspect_args
  source_file=${args[source]}

  # List files inside compressed file.
  # Globals:
  #   RARFILES
  #   ZIPFILES
  #   TARFILES
  # Arguments:
  #   Name of compressed file
  # Outputs:
  #   Writes files that are beging decompressed to stdout.
  listFiles () {
      if [[ $source_file =~ $RARFILES ]]; then

          unrar l "$source_file"

          elif [[ $source_file =~ $ZIPFILES ]]; then

          unzip -l "$source_file"

          elif [[ $source_file =~ $TARFILES ]]; then

          tar -ztvf "$source_file"

          elif [[ $source_file =~ $XZFILES ]]; then

          tar tvf "$source_file"

      fi
  }

  listFiles "$source_file"
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        dpress_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    extract | e)
      action="extract"
      shift
      dpress_extract_parse_requirements "$@"
      shift $#
      ;;

    compress | c)
      action="compress"
      shift
      dpress_compress_parse_requirements "$@"
      shift $#
      ;;

    list | l)
      action="list"
      shift
      dpress_list_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      dpress_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
dpress_extract_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dpress_extract_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="extract"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --del | -d)

        # :flag.case_no_arg
        args['--del']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['source']+x} ]]; then

          args['source']=$1
          shift
        elif [[ -z ${args['target']+x} ]]; then

          args['target']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['source']+x} ]]; then
    printf "missing required argument: SOURCE\nusage: dpress extract SOURCE [TARGET] [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
dpress_compress_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dpress_compress_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="compress"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --del | -d)

        # :flag.case_no_arg
        args['--del']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['source']+x} ]]; then

          args['source']=$1
          shift
        elif [[ -z ${args['target']+x} ]]; then

          args['target']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['source']+x} ]]; then
    printf "missing required argument: SOURCE\nusage: dpress compress SOURCE [TARGET] [OPTIONS]\n" >&2
    exit 1
  fi

}

# :command.parse_requirements
dpress_list_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        dpress_list_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.dependencies_filter

  # :command.command_filter
  action="list"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        if [[ -z ${args['source']+x} ]]; then

          args['source']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['source']+x} ]]; then
    printf "missing required argument: SOURCE\nusage: dpress list SOURCE\n" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="1.0.0"
  long_usage=''
  set -e

  # src/initialize.sh
  RARFILES='^.+\.rar$'
  ZIPFILES='^.+\.zip$'
  TARFILES='^.+\.tar\.gz$'
  XZFILES='^.+\.tar\.xz$'

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "extract")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        dpress_extract_usage
      else
        dpress_extract_command
      fi
      ;;

    "compress")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        dpress_compress_usage
      else
        dpress_compress_command
      fi
      ;;

    "list")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        dpress_list_usage
      else
        dpress_list_command
      fi
      ;;

  esac
}

initialize
run "$@"
